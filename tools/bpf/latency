#!/usr/bin/env bpftrace

usdt:./build/rt_demo:rt_demo:thread_start {
  if (arg0 == 1 || arg0 == 6) { // SCHED_FIFO or SCHED_DEADLINE
    @minor_page_faults[pid] = arg1;
    @major_page_faults[pid] = arg2;

    printf("RT thread (pid=%d) started with %d minor and %d major page faults\n", pid, arg1, arg2);
  }
}

usdt:./build/rt_demo:rt_demo:thread_done {
  if (arg0 == 1 || arg0 == 6) { // SCHED_FIFO or SCHED_DEADLINE
    printf("RT thread (pid=%d) done with %d minor (delta = %d) and %d (delta = %d) major page faults\n", pid, arg1, arg1 - @minor_page_faults[pid], arg2, arg2 - @major_page_faults[pid]);
    delete(@minor_page_faults[pid]);
    delete(@major_page_faults[pid]);

    // TODO: figure out a way to print and clear the histogram here.
    printf("RT thread (pid=%d) latency histogram will be displayed once CTRL+C is pressed\n", pid);
  }
}

usdt:./build/rt_demo:rt_demo:rt_iteration_start {
  @wakeup_latency[pid] = lhist(arg0 / 1000, 0, 1000, 20);
}

usdt:./build/rt_demo:rt_demo:rt_iteration_done {
  @iteration_latency[pid] = lhist(arg0 / 1000, 0, 200, 4);
}
